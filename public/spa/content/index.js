/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	claim_component,
	claim_space,
	create_component,
	destroy_component,
	detach,
	init,
	insert,
	mount_component,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from '../web_modules/svelte/internal/index.mjs';

import Navigation from '../components/navigation.js';
import Masthead from '../components/masthead.js';
import Services from '../components/services.js';
import Portfoliogrid from '../components/portfoliogrid.js';
import About from '../components/about.js';
import Team from '../components/team.js';
import Client from '../components/client.js';
import Contact from '../components/contact.js';
import Footer from '../components/footer.js';
import Issues from '../components/issues.js';
import Modalone from '../components/modals/modalone.js';
import Modaltwo from '../components/modals/modaltwo.js';
import Modalthree from '../components/modals/modalthree.js';
import Modalfour from '../components/modals/modalfour.js';
import Modalfive from '../components/modals/modalfive.js';
import Modalsix from '../components/modals/modalsix.js';

function create_fragment(ctx) {
	let navigation;
	let t0;
	let masthead;
	let t1;
	let services;
	let t2;
	let portfoliogrid;
	let t3;
	let about;
	let t4;
	let team;
	let t5;
	let client;
	let t6;
	let contact;
	let t7;
	let footer;
	let t8;
	let issues;
	let t9;
	let modalone;
	let t10;
	let modaltwo;
	let t11;
	let modalthree;
	let t12;
	let modalfour;
	let t13;
	let modalfive;
	let t14;
	let modalsix;
	let current;
	navigation = new Navigation({ props: { title: /*title*/ ctx[0] } });
	masthead = new Masthead({});
	services = new Services({});
	portfoliogrid = new Portfoliogrid({});
	about = new About({});
	team = new Team({});
	client = new Client({});
	contact = new Contact({});
	footer = new Footer({});
	issues = new Issues({});
	modalone = new Modalone({});
	modaltwo = new Modaltwo({});
	modalthree = new Modalthree({});
	modalfour = new Modalfour({});
	modalfive = new Modalfive({});
	modalsix = new Modalsix({});

	return {
		c() {
			create_component(navigation.$$.fragment);
			t0 = space();
			create_component(masthead.$$.fragment);
			t1 = space();
			create_component(services.$$.fragment);
			t2 = space();
			create_component(portfoliogrid.$$.fragment);
			t3 = space();
			create_component(about.$$.fragment);
			t4 = space();
			create_component(team.$$.fragment);
			t5 = space();
			create_component(client.$$.fragment);
			t6 = space();
			create_component(contact.$$.fragment);
			t7 = space();
			create_component(footer.$$.fragment);
			t8 = space();
			create_component(issues.$$.fragment);
			t9 = space();
			create_component(modalone.$$.fragment);
			t10 = space();
			create_component(modaltwo.$$.fragment);
			t11 = space();
			create_component(modalthree.$$.fragment);
			t12 = space();
			create_component(modalfour.$$.fragment);
			t13 = space();
			create_component(modalfive.$$.fragment);
			t14 = space();
			create_component(modalsix.$$.fragment);
		},
		l(nodes) {
			claim_component(navigation.$$.fragment, nodes);
			t0 = claim_space(nodes);
			claim_component(masthead.$$.fragment, nodes);
			t1 = claim_space(nodes);
			claim_component(services.$$.fragment, nodes);
			t2 = claim_space(nodes);
			claim_component(portfoliogrid.$$.fragment, nodes);
			t3 = claim_space(nodes);
			claim_component(about.$$.fragment, nodes);
			t4 = claim_space(nodes);
			claim_component(team.$$.fragment, nodes);
			t5 = claim_space(nodes);
			claim_component(client.$$.fragment, nodes);
			t6 = claim_space(nodes);
			claim_component(contact.$$.fragment, nodes);
			t7 = claim_space(nodes);
			claim_component(footer.$$.fragment, nodes);
			t8 = claim_space(nodes);
			claim_component(issues.$$.fragment, nodes);
			t9 = claim_space(nodes);
			claim_component(modalone.$$.fragment, nodes);
			t10 = claim_space(nodes);
			claim_component(modaltwo.$$.fragment, nodes);
			t11 = claim_space(nodes);
			claim_component(modalthree.$$.fragment, nodes);
			t12 = claim_space(nodes);
			claim_component(modalfour.$$.fragment, nodes);
			t13 = claim_space(nodes);
			claim_component(modalfive.$$.fragment, nodes);
			t14 = claim_space(nodes);
			claim_component(modalsix.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(navigation, target, anchor);
			insert(target, t0, anchor);
			mount_component(masthead, target, anchor);
			insert(target, t1, anchor);
			mount_component(services, target, anchor);
			insert(target, t2, anchor);
			mount_component(portfoliogrid, target, anchor);
			insert(target, t3, anchor);
			mount_component(about, target, anchor);
			insert(target, t4, anchor);
			mount_component(team, target, anchor);
			insert(target, t5, anchor);
			mount_component(client, target, anchor);
			insert(target, t6, anchor);
			mount_component(contact, target, anchor);
			insert(target, t7, anchor);
			mount_component(footer, target, anchor);
			insert(target, t8, anchor);
			mount_component(issues, target, anchor);
			insert(target, t9, anchor);
			mount_component(modalone, target, anchor);
			insert(target, t10, anchor);
			mount_component(modaltwo, target, anchor);
			insert(target, t11, anchor);
			mount_component(modalthree, target, anchor);
			insert(target, t12, anchor);
			mount_component(modalfour, target, anchor);
			insert(target, t13, anchor);
			mount_component(modalfive, target, anchor);
			insert(target, t14, anchor);
			mount_component(modalsix, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const navigation_changes = {};
			if (dirty & /*title*/ 1) navigation_changes.title = /*title*/ ctx[0];
			navigation.$set(navigation_changes);
		},
		i(local) {
			if (current) return;
			transition_in(navigation.$$.fragment, local);
			transition_in(masthead.$$.fragment, local);
			transition_in(services.$$.fragment, local);
			transition_in(portfoliogrid.$$.fragment, local);
			transition_in(about.$$.fragment, local);
			transition_in(team.$$.fragment, local);
			transition_in(client.$$.fragment, local);
			transition_in(contact.$$.fragment, local);
			transition_in(footer.$$.fragment, local);
			transition_in(issues.$$.fragment, local);
			transition_in(modalone.$$.fragment, local);
			transition_in(modaltwo.$$.fragment, local);
			transition_in(modalthree.$$.fragment, local);
			transition_in(modalfour.$$.fragment, local);
			transition_in(modalfive.$$.fragment, local);
			transition_in(modalsix.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(navigation.$$.fragment, local);
			transition_out(masthead.$$.fragment, local);
			transition_out(services.$$.fragment, local);
			transition_out(portfoliogrid.$$.fragment, local);
			transition_out(about.$$.fragment, local);
			transition_out(team.$$.fragment, local);
			transition_out(client.$$.fragment, local);
			transition_out(contact.$$.fragment, local);
			transition_out(footer.$$.fragment, local);
			transition_out(issues.$$.fragment, local);
			transition_out(modalone.$$.fragment, local);
			transition_out(modaltwo.$$.fragment, local);
			transition_out(modalthree.$$.fragment, local);
			transition_out(modalfour.$$.fragment, local);
			transition_out(modalfive.$$.fragment, local);
			transition_out(modalsix.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(navigation, detaching);
			if (detaching) detach(t0);
			destroy_component(masthead, detaching);
			if (detaching) detach(t1);
			destroy_component(services, detaching);
			if (detaching) detach(t2);
			destroy_component(portfoliogrid, detaching);
			if (detaching) detach(t3);
			destroy_component(about, detaching);
			if (detaching) detach(t4);
			destroy_component(team, detaching);
			if (detaching) detach(t5);
			destroy_component(client, detaching);
			if (detaching) detach(t6);
			destroy_component(contact, detaching);
			if (detaching) detach(t7);
			destroy_component(footer, detaching);
			if (detaching) detach(t8);
			destroy_component(issues, detaching);
			if (detaching) detach(t9);
			destroy_component(modalone, detaching);
			if (detaching) detach(t10);
			destroy_component(modaltwo, detaching);
			if (detaching) detach(t11);
			destroy_component(modalthree, detaching);
			if (detaching) detach(t12);
			destroy_component(modalfour, detaching);
			if (detaching) detach(t13);
			destroy_component(modalfive, detaching);
			if (detaching) detach(t14);
			destroy_component(modalsix, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { title } = $$props;

	$$self.$$set = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
	};

	return [title];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { title: 0 });
	}
}

export default Component;